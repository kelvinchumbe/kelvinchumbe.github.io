{"version":3,"sources":["logo.svg","components/DisplayComment.js","components/Comments.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayComment","props","state","comments","map","review","i","className","name","Array","parseInt","rating","icon","class","review_summary","date","Comments","trip_type","postReview","bind","fetch","method","headers","cors","credentials","body","JSON","stringify","then","response","json","setState","catch","error","console","log","src","alt","initialValues","validationSchema","Yup","required","onSubmit","values","setSubmitting","Intl","DateTimeFormat","year","month","day","format","Date","htmlFor","type","as","value","this","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3805c175.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nconst DisplayComment = (props) => {\r\n  return (\r\n    <div>\r\n      {props.state.comments.map((review, i) => {\r\n        return (\r\n          <div className=\"review\">\r\n            <div className=\"review-item\">{review.name}</div>\r\n            <div className=\"review-item\">\r\n              {[...Array(parseInt(review.rating))].map((icon, i) => (\r\n                <i class=\"icon-star\" key={i}></i>\r\n              ))}\r\n            </div>\r\n            <div className=\"review-item review-summary\">\r\n              {review.review_summary}\r\n            </div>\r\n            <div className=\"review-item\">{review.review}</div>\r\n            <div className=\"review-item\">\r\n              {\" \"}\r\n              <b>Date: </b>\r\n              {review.date}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayComment;\r\n","import React, { Component } from \"react\";\r\nimport { Field, Formik, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport DisplayComment from \"./DisplayComment\";\r\n\r\nclass Comments extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      review: {},\r\n      comments: [\r\n        {\r\n          date: \"March 4, 2021\",\r\n          name: \"Frederick Jones\",\r\n          rating: \"5\",\r\n          review:\r\n            \"Hotel was absolutely great, staff were very friendly and helpful. Loved the food (Chef Jane in the breakfast area was very generous). Room was clean and sanitized. I asked for a car to take me to the airport, they had few options. I paid for a BMW X1 and they upgraded my ride to a BMW X5. Only concern was that the AC in the room was very hot.. I tried to work it out more than once and still same result.\",\r\n          review_summary: \"One night layover\",\r\n          trip_type: \"Traveled as a couple\",\r\n        },\r\n\r\n        {\r\n          date: \"March 11, 2021\",\r\n          name: \"James C.\",\r\n          rating: \"2\",\r\n          review:\r\n            \"Regretfully visited Villa Rosa with a paid upgrade to premium room. Unfortunately construction noise which will likely continue for some time was unbearable. Downgraded to standard room at the back but not much assistance and a meager few dollars refund, not commiserate with what was paid. Would highly suggest the property to warn of the issue in advance in all transparency rather than having disappointed and irritated guests.\",\r\n          review_summary: \"The Noise\",\r\n          trip_type: \"Traveled on business\",\r\n        },\r\n      ],\r\n    };\r\n    this.postReview = this.postReview.bind(this);\r\n  }\r\n\r\n  postReview(review) {\r\n    fetch(\"https://hotel-reviews-rating.herokuapp.com/post-review\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      cors: \"no-cors\",\r\n      credentials: \"same-origin\",\r\n      body: JSON.stringify({ review: review[\"review\"] }),\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((response) => {\r\n        review = {\r\n          ...review,\r\n          rating: response.rating,\r\n        };\r\n\r\n        // this.setState({\r\n        //   review: review,\r\n        // });\r\n\r\n        this.setState({ comments: [...this.state.comments, review] });\r\n        // this.state.comments.push(this.state.review);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const trip_types = [\r\n      \"Traveled as a couple\",\r\n      \"Traveled on business\",\r\n      \"Traveled with friends\",\r\n      \"Traveled on vacation\",\r\n    ];\r\n\r\n    return (\r\n      <div className=\"review-page\">\r\n        <div className=\"header\">\r\n          <img\r\n            src=\"../../assets/hotel_header_1.jpg\"\r\n            alt=\"Header-logo\"\r\n            className=\"header-image\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"comments-sect\">\r\n          <div className=\"input-comments\">\r\n            <Formik\r\n              initialValues={{\r\n                name: \"\",\r\n                review: \"\",\r\n                date: \"\",\r\n                review_summary: \"\",\r\n                trip_type: \"\",\r\n              }}\r\n              validationSchema={Yup.object({\r\n                name: Yup.string().required(\r\n                  \"You must enter your name to post a review\"\r\n                ),\r\n                review: Yup.string().required(\r\n                  \"You must enter a review post it\"\r\n                ),\r\n                review_summary: Yup.string().required(\r\n                  \"You must enter areview summary to post a review\"\r\n                ),\r\n                trip_type: Yup.string().required(\r\n                  \"You must enter thr type of trip you had\"\r\n                ),\r\n              })}\r\n              onSubmit={(values, { setSubmitting }) => {\r\n                values = {\r\n                  ...values,\r\n                  date: new Intl.DateTimeFormat(\"en-US\", {\r\n                    year: \"numeric\",\r\n                    month: \"long\",\r\n                    day: \"2-digit\",\r\n                  }).format(new Date()),\r\n                };\r\n\r\n                // alert(JSON.stringify(values, null, 2));\r\n                this.postReview(values);\r\n              }}\r\n            >\r\n              <Form className=\"form\">\r\n                <div className=\"form-input\">\r\n                  <label htmlFor=\"name\" className=\"input-description-details\">\r\n                    Name:\r\n                  </label>\r\n                  <Field type=\"text\" name=\"name\" className=\"field-input\" />\r\n                  <ErrorMessage\r\n                    name=\"review_summary\"\r\n                    className=\"form-error-messages\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-input\">\r\n                  <label\r\n                    htmlFor=\"review_summary\"\r\n                    className=\"input-description-details\"\r\n                  >\r\n                    Review Summary:\r\n                  </label>\r\n                  <Field\r\n                    type=\"text\"\r\n                    name=\"review_summary\"\r\n                    className=\"field-input\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"review_summary\"\r\n                    className=\"form-error-messages\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-input\">\r\n                  <label htmlFor=\"review\" className=\"input-description-details\">\r\n                    Review:\r\n                  </label>\r\n                  <Field as=\"textarea\" name=\"review\" className=\"field-input\" />\r\n                  <ErrorMessage name=\"review\" className=\"form-error-messages\" />\r\n                </div>\r\n\r\n                <div className=\"form-input\">\r\n                  <label\r\n                    htmlFor=\"trip_type\"\r\n                    className=\"input-description-details\"\r\n                  >\r\n                    Trip Type:\r\n                  </label>\r\n                  <Field as=\"select\" name=\"trip_type\" className=\"field-input\">\r\n                    {trip_types.map((trip_type, i) => {\r\n                      return (\r\n                        <option key={i} value={trip_type} className=\"options\">\r\n                          {\" \"}\r\n                          {trip_type}{\" \"}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </Field>\r\n                  <ErrorMessage\r\n                    name=\"trip_type\"\r\n                    className=\"form-error-messages\"\r\n                  />\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"submit\">\r\n                  Comment\r\n                </button>\r\n              </Form>\r\n            </Formik>\r\n          </div>\r\n\r\n          <div className=\"display-comments\">\r\n            <DisplayComment state={this.state} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Comment from \"./components/Comments\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Comment />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}